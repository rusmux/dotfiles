#!/usr/bin/env bash
# This script was generated by bashly 1.2.10 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ ${BASH_VERSINFO:-0} -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  #!/usr/bin/env bash

  # shellcheck disable=SC2154
  nodes=${args[--nodes]}
  use_cilium=${args[--cilium]:-0}

  ((use_cilium)) && cni=bridge && extra_config="--extra-config=kubeadm.skip-phases=addon/kube-proxy"

  minikube start \
    --nodes="$nodes" \
    --cpus=no-limit \
    --memory=no-limit \
    --cni="${cni:-auto}" \
    --insecure-registry="host.minikube.internal:5000" \
    "${extra_config:-''}" \
    "${other_args[@]}"

  worker_nodes=$(kubectl get nodes -o name | grep '\-')
  for node in $worker_nodes; do kubectl label "$node" node-role.kubernetes.io/worker=worker; done
  ((nodes > 2)) && kubectl taint node minikube node-role.kubernetes.io/control-plane=:NoSchedule

  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  helmfile="$SCRIPT_DIR/mk-start-src/helmfile.yaml"

  if ((use_cilium)); then
    helmfile apply --skip-diff-on-install --suppress-diff -f "$helmfile" -l name=cilium \
      --set k8sServiceHost="$(minikube ip)" --set k8sServicePort=8443

    # without kube-proxy, we need to update CoreDNS to use the host's DNS server
    # see: https://github.com/cilium/cilium/issues/29113
    dns_server=$(scutil --dns | awk '/nameserver/ {print $3; exit}')
    kubectl get cm coredns -n kube-system -o yaml |
      sed "s/forward \. \/etc\/resolv\.conf/forward \. $dns_server/" |
      kubectl apply -f -
    kubectl rollout restart deploy coredns -n kube-system

    sleep 3

    # restart pods that are not using hostNetwork to pick up the Cilium CNI
    kubectl get pods -A -o custom-columns=1:.metadata.name,2:.spec.hostNetwork |
      awk '/<none>/ {print $1}' |
      xargs -r kubectl -n kube-system delete pod
  fi

  helmfile apply --skip-diff-on-install --suppress-diff -f "$helmfile" -l name!=cilium

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
mk_start_usage() {
  printf "mk-start - Start a Minikube cluster with better defaults\n\n"

  printf "%s\n" "Usage:"
  printf "  mk-start [OPTIONS] [--] [MINIKUBE ARGUMENTS...]\n"
  printf "  mk-start --help | -h\n"
  printf "  mk-start --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--nodes, -n NODES"
    printf "    Number of nodes to create\n"
    printf "    %s\n" "Default: 2"
    echo

    # :flag.usage
    printf "  %s\n" "--cilium, -c"
    printf "    Use Cilium as the CNI plugin\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  MINIKUBE ARGUMENTS..."
    printf "    Additional arguments for Minikube\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ $arg == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d $1 ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f $1 ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ $1 =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z $1 ]] && echo "must not be empty"
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    --version | -v)
      version_command
      exit
      ;;

    --help | -h)
      long_usage=yes
      mk_start_usage
      exit
      ;;

    *)
      break
      ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --nodes | -n)

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        args['--nodes']="$2"
        shift
        shift
      else
        printf "%s\n" "--nodes requires an argument: --nodes, -n NODES" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --cilium | -c)

      # :flag.case_no_arg
      args['--cilium']=1
      shift
      ;;

    --)
      shift
      other_args+=("$@")
      break
      ;;

    -?*)
      other_args+=("$1")
      shift
      ;;

    *)
      # :command.parse_requirements_case
      # :command.parse_requirements_case_catch_all
      other_args+=("$1")
      shift

      ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--nodes']:-} ]] || args['--nodes']="2"

  # :command.validations
  # :flag.validations
  if [[ -v args['--nodes'] && -n $(validate_integer "${args['--nodes']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--nodes, -n NODES" "$(validate_integer "${args['--nodes']:-}")" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -euo pipefail

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -a other_args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
  "root") root_command ;;
  esac
}

if [[ ${BASH_SOURCE[0]} == "${0}" ]]; then
  initialize
  run "$@"
fi
